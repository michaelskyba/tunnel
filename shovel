#!/bin/sh -e

# Almost all of the code here has to do with the UI.
# As you can see, the actual tunnel interaction is very simple.

input() {
	printf "> "
	read -r sel
}

card_input() {
	clear
	echo "
Enter a front side for the card.
- Tabs cannot be used in cards, so they will be converted to spaces.
- Press Ctrl+c if you wish to exit.
"
	input
	front="$(echo "$sel" | sed "s/	/    /g")"

	clear
	echo "
Enter a back side for the card.
- Tabs cannot be used in cards, so they will be converted to spaces.
- Press Ctrl+c if you wish to exit.
"
	input
	back="$(echo "$sel" | sed "s/	/    /g")"

	while :
	do
		clear
		echo "
Your card's front, surrounded by pipes:
|$front|
Your card's back, surrounded by pipes:
|$back|

Press Ctrl+c to exit.

1) Confirm
2) Restart
"

		input
		echo "$sel" | grep "^[1-2]$" && break
	done

	[ "$sel" = 2 ] \
		&& card_input \
		&& return

	export front
	export back
}

check_usage() {
	[ -z "$deck" ] \
		&& echo "Usage: shovel <deck file>" \
		&& exit 1

	[ -f "$deck" ] || exists=0
	[ "$exists" ] \
		&& echo "$deck: Not a file" \
		&& exit 1

	# I don't know if it's my computer but for some reason
	# the script dies without an echo from check_usage
	echo > /dev/null
}


main_menu() {
	clear
	echo "
Welcome to shovel, an example of an interactive tunnel wrapper.
Deck used: '$deck'.
Press Ctrl+c to exit.

1) Start the review.
2) Add a card.
3) Modify a card.
4) Browse cards.
"

	input
	echo "$sel" | grep -q "^[1-4]$" || main_menu

	# This code won't be reached if main_menu was just executed

	case "$sel" in
		1) start_review ;;
		2) add_card ;;
		3) modify_card ;;
		4) browse_cards ;;
	esac
}

add_card() {
	card_input
	echo "$front	$back" >> "$deck"

	clear
	echo "
Your card was successfully added to '$deck'.
Press Enter to continue.
"

	read
	main_menu
}

modify_card() {
	clear

	fzf --version > /dev/null 2>&1 || broken=1
	if [ "$broken" ]
	then
		echo "
You do not have fzf installed, which is used for selection.
Press Enter to go back to the main menu.
"
		read
		main_menu
	fi

	echo "
You will be presented with a menu, in which you will pick a card to modify.
Press Enter to continue.
"

	# Putting "x. " where x is the line number on each line lets us easily determine
	# which line needs to be replaced. Trying to use sed for it would be really janky
	# when you consider all the escaping you need to do. We're doing it before the
	# read so that the delay will be less noticeable (going while the user is reading).

	tmpdir=${TMPDIR:-/tmp}
	file="$tmpdir/shovel/$(date +%s)"
	mkdir -p "$tmpdir"
	mkdir -p "$tmpdir/shovel"

	i=1
	while read -r line
	do
		echo "$i. $line" >> "$file"
		i=$((i+1))
	done < "$deck"

	read

	sel=$(fzf < "$file")
	[ -z "$sel" ] && main_menu

	line_number=${sel%%.*}

	# Keep the card review info, if it exists
	extra=$sel
	extra=${extra#*	}
	extra=${extra#*	}
	extra="	$extra"
	echo "$sel" | grep -q "^[^	]*	[^	]*$" && unset extra
	echo "${extra#	}" | grep -q "	" || unset extra

	card_input

	tmp=$(mktemp -u)
	awk "NR==$line_number {\$0=\"$front	$back$extra\"} 1" "$deck" > "$tmp"
	mv "$tmp" "$deck"

	clear
	echo "
Your card was successfully modified in '$deck'.
Press Enter to continue.
"

	read
	main_menu
}

browse_cards() {
	clear

	${PAGER:-less} "$deck"
	main_menu
}

start_review() {
	clear

	tunnel new_cards "$deck"

	due=$(tunnel due "$deck")
	retry=$(tunnel retry "$deck")
	[ -z "$due" ] \
		&& [ -z "$retry" ] \
		&& no_reviews=1

	if [ "$no_reviews" ]
	then
		echo "
You have no reviews due.
Come back tomorrow, or after adding new cards.
Press Enter to continue.
"
		read

		main_menu
	fi

	for card in $due
	do
		review_card
	done
}

review_card() {
	clear

	front=$(tunnel front $card "$deck")
	back=$(tunnel back $card "$deck")

	echo "
Front ==================================================
$front

Try recalling the back of the card.
Once you've tried your best, press Enter to flip the card.
"
	read

	while :
	do
		clear
		echo "
Front ==================================================
$front

Back ===================================================
$back

Now, grade yourself on how well you recalled the card.
0) 'Total blackout', complete failure to recall the information.
1) Incorrect response, but upon seeing the correct answer it felt familiar.
2) Incorrect response, but upon seeing the correct answer it seemed easy to remember.
3) Correct response, but required significant difficulty to recall.
4) Correct response, after some hesitation.
5) Correct response with perfect recall.
"

		input
		echo "$sel" | grep -q "^[0-5]$" && break
	done

	echo "grade: $sel"
	read
}

deck="$1"
check_usage
main_menu
